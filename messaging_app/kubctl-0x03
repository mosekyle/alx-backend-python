#!/bin/bash

# Function to check if command exists
command_exists() {
    command -v "$1" >/dev/null 2>&1
}

# Function to get service URL
get_service_url() {
    echo "http://$(minikube ip):$(kubectl get service django-messaging-service -o=jsonpath='{.spec.ports[0].nodePort}')"
}

# Check if curl is installed
if ! command_exists curl; then
    echo "Error: curl is not installed. Please install curl first."
    exit 1
fi

# Start monitoring for downtime in background
echo "Starting downtime monitoring..."
SERVICE_URL=$(get_service_url)

# Start monitoring in background with timestamp
(while true; do
    timestamp=$(date '+%H:%M:%S')
    status_code=$(curl -s -o /dev/null -w "%{http_code}" $SERVICE_URL)
    echo "[$timestamp] Status Code: $status_code"
    sleep 1
done) &

MONITOR_PID=$!

# Apply the updated deployment
echo "Applying rolling update..."
kubectl apply -f blue_deployment.yaml

# Monitor the rollout status
echo "Monitoring rollout status..."
kubectl rollout status deployment/django-messaging-blue

# Get initial pod list
echo "Initial pods:"
kubectl get pods -l app=django-messaging

# Wait for rollout to complete
echo "Waiting for rollout to complete..."
sleep 30

# Get final pod list
echo "Final pods after update:"
kubectl get pods -l app=django-messaging

# Check rollout history
echo "Rollout history:"
kubectl rollout history deployment/django-messaging-blue

# Stop the monitoring
kill $MONITOR_PID

# Final verification
echo "Verifying deployment status..."
kubectl get deployment django-messaging-blue -o wide

echo "Rolling update completed!"
